import { useState } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import { motion } from "framer-motion";
import styles from "./MarkDownPage.module.css";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

const generateDummyMarkdown = (data, compliance, prompt) => {
  return `# Test Case Report

**Compliance:** ${compliance || "N/A"}

**Prompt Used:** ${prompt || "Default Instructions"}

## Uploaded Requirements

${data.map((req, idx) => `- Requirement ${idx + 1}: ${req}`).join("\n")}

## Test Cases

${data
  .map((req, idx) => `- Test Case ${idx + 1} for Requirement ${idx + 1}`)
  .join("\n")}

---

*Generated by TestGenAI*`;
};

export default function MarkdownPage() {
  const location = useLocation();
  const navigate = useNavigate();
  const { requirements, compliance } = location.state || {
    requirements: [],
    compliance: "N/A",
  };

  const [prompt, setPrompt] = useState("");
  const [submittedPrompt, setSubmittedPrompt] = useState(null);
  const [showPromptInput, setShowPromptInput] = useState(false);

  const [showYesNo, setShowYesNo] = useState(true);
  const [showFormatSelect, setShowFormatSelect] = useState(false);
  const [selectedFormats, setSelectedFormats] = useState([]);
  const [loading, setLoading] = useState(false);

  const [feedbackCount, setFeedbackCount] = useState(0);
  const maxFeedback = 3;

  const fileFormats = ["XML", "Word", "PDF", "Markup"];

  const handleYesClick = () => {
    setShowYesNo(false);
    setShowFormatSelect(true);
  };

  const handleNoClick = () => {
    if (feedbackCount >= maxFeedback) {
      toast.error("You have reached the maximum limit of feedback submissions.");
      return;
    }
    setShowYesNo(false);
    setShowPromptInput(true);
  };

  const handlePromptSubmit = () => {
    if (!prompt.trim()) {
      toast.error("Please enter a valid prompt.");
      return;
    }

    toast.info("Processing your feedback... This may take a moment.");
    setLoading(true);

    setTimeout(() => {
      setSubmittedPrompt(prompt);
      setFeedbackCount((prev) => prev + 1);

      toast.success("Report regenerated successfully!");
      setLoading(false);

      // Reset flow
      setShowPromptInput(false);
      setPrompt("");
      setShowYesNo(true);
      setShowFormatSelect(false);
      setSelectedFormats([]);
    }, 7000); // ⏳ simulate backend delay ~13s
  };

  const handleFormatToggle = (format) => {
    if (selectedFormats.includes(format)) {
      setSelectedFormats(selectedFormats.filter((f) => f !== format));
    } else {
      setSelectedFormats([...selectedFormats, format]);
    }
  };

  const handleGenerateFiles = () => {
    navigate("/generated-files", { state: { formats: selectedFormats } });
  };

  const markdown = generateDummyMarkdown(
    requirements,
    compliance,
    submittedPrompt
  );

  return (
    <div className={styles.page}>
      <motion.h1
        className={styles.title}
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
      >
        Generated Markdown Report
      </motion.h1>

      <motion.pre
        className={styles.markdownBox}
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.5 }}
      >
        {loading ? "⏳ Generating new report... Please wait." : markdown}
      </motion.pre>

      {/* Yes/No buttons */}
      {showYesNo && !loading && (
        <motion.div
          className={styles.yesNoContainer}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
        >
          <button className={styles.yesBtn} onClick={handleYesClick}>
            Yes
          </button>
          <button className={styles.noBtn} onClick={handleNoClick}>
            No
          </button>
        </motion.div>
      )}

      {/* Prompt input on No */}
      {showPromptInput && !loading && (
        <motion.div
          className={styles.promptContainer}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
        >
          <h3>Enter your feedback instructions</h3>
          <textarea
            className={styles.promptBox}
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder="Write your custom prompt..."
          />
          <button className={styles.submitBtn} onClick={handlePromptSubmit}>
            Submit
          </button>
        </motion.div>
      )}

      {/* Format selection */}
      {showFormatSelect && !loading && (
        <motion.div
          className={styles.formatContainer}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
        >
          <h3>Select File Formats:</h3>
          <div className={styles.formatButtons}>
            {fileFormats.map((format) => (
              <button
                key={format}
                className={`${styles.formatBtn} ${
                  selectedFormats.includes(format) ? styles.selected : ""
                }`}
                onClick={() => handleFormatToggle(format)}
              >
                {format}
              </button>
            ))}
          </div>

          {selectedFormats.length > 0 && (
            <button className={styles.generateBtn} onClick={handleGenerateFiles}>
              Generate Files
            </button>
          )}
        </motion.div>
      )}

    </div>
  );
}
